<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/jdbc 
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd">
	
		
		
		<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
			<property name="locations">
				<list> 
					<value>classpath:/properties/db.properties</value>
				</list>
			</property>
			<property name="fileEncoding" value="utf-8" />
			<!-- <property name="ignoreUnresolvablePlaceholders" value="true" /> -->   
		</bean>
		
		<!-- 数据源：db_salesman -->
		<bean id="dataSource_pay" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<property name="url" value="${url}" />
			<property name="username" value="${username}" />
			<property name="password" value="${password}" />
			<property name="initialSize" value="#{T(java.lang.Integer).parseInt('${initialSize}')}" />
			<property name="minIdle" value="${minIdle}" />
			<property name="maxActive" value="${maxActive}" />
			<property name="maxWait" value="${maxWait}" />
			<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
			<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
			<property name="validationQuery" value="${validationQuery}" />
			<property name="testWhileIdle" value="${testWhileIdle}" />
			<property name="testOnBorrow" value="${testOnBorrow}" />
			<property name="testOnReturn" value="${testOnReturn}" />
			<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
			<property name="filters" value="${filters}" />
		</bean>
		
		<bean id="transactionManager_pay" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource_pay" />
		</bean>
		
		<tx:annotation-driven transaction-manager="transactionManager_pay" />
		
		<!-- 使用dataSource_pay数据源的springJDBC,如果需要可以引用 -->
		<bean id="jdbcTemplate_pay"  class="org.springframework.jdbc.core.JdbcTemplate">
			<property name = "dataSource" ref="dataSource_pay"></property>
		</bean>
		
		
		<!-- mybatis配置开始 -->
		<bean id="sqlSessionFactory_pay" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="dataSource_pay" />
			<property name="typeAliasesPackage" value="com.fc.pay.*.entity" />
			<property name="mapperLocations">
				<list><value>classpath*:/com/fc/pay/*/dao/impl/*.xml </value></list>
			</property>
			<property name="plugins">
				<list><ref bean="statementHandlerInterceptor" /></list>
			</property>
		</bean>
		<bean id="statementHandlerInterceptor" class="com.fc.pay.common.system.mybatis.StatementHandlerInterceptor" />
		
		<bean id="mapperScanner_pay" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
				<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_pay" />
				<property name="basePackage" value="com.fc.pay.*.dao" />
				<!-- <property name="annotationClass" value="com.fc.sales.system.mybatis.annotation.Salesman"/> -->
		</bean>
		
		<bean id="sqlSession_pay" class="org.mybatis.spring.SqlSessionTemplate">
		  	<constructor-arg index="0" ref="sqlSessionFactory_pay" />
		</bean>
		<!-- mybatis结束 -->
		
		
		<!-- 
	    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
	          <property name="maxIdle" value="${redis.maxIdle}" />
	          <property name="maxWaitMillis" value="${redis.maxWait}" />
	          <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	    </bean >
	
	    <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
	          <property name="poolConfig" ref="poolConfig" />
	          <property name="port" value="${redis.port}" />
	          <property name="hostName" value="${redis.host}" />
	          <property name="password" value="${redis.password}" />
	          <property name="timeout" value="${redis.timeout}" />
	    </bean >
	    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
	          <property name="connectionFactory" ref="connectionFactory" />
	          <property name="keySerializer" >
	              <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	          </property>
	          <property name="valueSerializer" >
	              <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	          </property>
	    </bean > -->
	    
	  <!--  <import resource="activemq.xml"/> -->

</beans>