<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>jj.tech.paolu</groupId>
	<artifactId>paolu</artifactId>
	<name>paolu</name>
	<packaging>jar</packaging>
	<version>1.0.0</version>
	
	<parent>
	    <groupId>org.springframework.boot</groupId>
	    <artifactId>spring-boot-starter-parent</artifactId>
	    <version>3.0.3</version>
	</parent>
	
	<properties>
		<java.version>18</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jooq.version>3.17.5</jooq.version>
		<!-- <start-class>...</start-class>
		<docker.image.prefix>springcloud</docker.image.prefix> -->
	</properties>

	
	<dependencyManagement>
	    <dependencies>
	        <dependency>
	            <groupId>org.springframework.cloud</groupId>
	            <artifactId>spring-cloud-dependencies</artifactId>
	            <version>2022.0.1</version>
	            <type>pom</type>
	            <scope>import</scope>
	        </dependency>
	    </dependencies>
	</dependencyManagement>


	<dependencies>
		<!-- <dependency>
	        <groupId>org.springframework.cloud</groupId>
	        <artifactId>spring-cloud-starter-eureka</artifactId>
    	</dependency> -->
    	<!-- <dependency>
	      <groupId>org.springframework.cloud</groupId>
	      <artifactId>spring-cloud-starter-ribbon</artifactId>
	    </dependency> -->
    	<!-- <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency> -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency> -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
		  <groupId>org.springframework.cloud</groupId>
		  <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
		</dependency> -->
		
		<!--  2020 bootstrap.yaml独立 -->
		<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-consul-all</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
	
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
	    
	    <dependency>
		    <groupId>com.querydsl</groupId>
		    <artifactId>querydsl-jpa</artifactId>
		    <version>${querydsl.version}</version>
		    <classifier>jakarta</classifier>
		</dependency>
		
		<!-- <dependency>
		  <groupId>com.querydsl</groupId>
		  <artifactId>querydsl-sql</artifactId>
		</dependency> -->
		<!-- <dependency> 
		  <groupId> com.querydsl </groupId> 
		  <artifactId> querydsl-apt </artifactId> 
		  <version> ${querydsl.version} </version> 
		  <scope> provided </scope>
		  <classifier>jakarta</classifier>
		  <exclusions>
		  	<exclusion>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		  	</exclusion>
		  </exclusions>
		</dependency>  -->
		
		<!-- <dependency>
		  <groupId>com.querydsl</groupId>
		  <artifactId>querydsl-sql-codegen</artifactId>
		</dependency> -->
		<!-- 
		<dependency>
	        <groupId>com.querydsl</groupId>
	        <artifactId>querydsl-jpa-codegen</artifactId>
	    </dependency>
		 -->	
		
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-json</artifactId>
		</dependency>
		
		<dependency> 
		    <groupId>org.springframework.boot</groupId> 
		    <artifactId>spring-boot-starter-validation</artifactId> 
		</dependency>
		
		<!-- 使用slf4j+logbakc日志 （淘汰log4j和commons-logging） logback-classic包改善了log4j，且实现了SLF4J API,maven自动引入slf4j-api、logback-core-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	   
	    <dependency>
		    <groupId>org.springdoc</groupId>
		    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		    <version>2.0.0-RC2</version>
	    </dependency>
	    <dependency>
		    <groupId>org.springdoc</groupId>
		    <artifactId>springdoc-openapi-starter-common</artifactId>
		    <version>2.0.0-RC2</version>
		</dependency>
	   
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<!-- <dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency> -->

		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.github.penggle</groupId>
			<artifactId>kaptcha</artifactId>
			<version>2.3.2</version>
		</dependency>
	
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
	
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.hibernate.tool</groupId>
		    <artifactId>hibernate-tools-ant</artifactId>
		    <version>6.1.7.Final</version>
	    </dependency>
		
	</dependencies>


	<build>

		<plugins>
			<!-- spring 引导 maven 插件提供了许多方便的功能: 
				1、它收集了类路径上的所有 jar, 并生成一个单一的可运行的 "超级jar", 这使得执行和传输服务更加方便。 
				2、它搜索公共静态 void main () 方法以将其标记为可运行类。 
				3、它提供了一个内置的依赖项冲突解决程序,  它将版本号设置为与 spring 启动依赖项匹配。 
				4、您可以重写任何您希望的版本, 但它将默认为启动所选的一组版本。 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

			<plugin>
				<!-- 选择这个打包方式是因为熟悉，1.4.13版本会到dockerhub取镜像，打包时间过长:dockerfile:build -->
	            <groupId>com.spotify</groupId>
			    <artifactId>dockerfile-maven-plugin</artifactId>
			    <version>1.4.10</version>
			    <configuration>
			    	<repository>paolu/${project.artifactId}</repository>
			    	<noCache>true</noCache>
			    </configuration>
	        </plugin>
			
			<!-- 读取项目yaml文件，编译打包的时候赋值给pom文件，很久没有维护，希望找到代替 -->
			<plugin>
	            <groupId>it.ozimov</groupId>
				<artifactId>yaml-properties-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
			        <execution>
			            <phase>initialize</phase>
			            <goals>
			                <goal>read-project-properties</goal>
			            </goals>
			            <configuration>
			                <files>
			                    <file>src/main/resources/application.yml</file>
			                </files>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>
			
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>1.5</version>
				<configuration>
                    <skip>${maven.test.skip}</skip>
		            
                </configuration>

				<executions>
					<execution>
						<id>create-database-h2</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        
						<configuration>
							 <driver>${spring.datasource.hikari.driver-class-name}</driver>
		                     <url>${spring.datasource.url}</url>
		                     <username>${spring.datasource.username}</username>
		                     <password>${spring.datasource.password}</password>

							<autocommit>true</autocommit>
							<srcFiles>
								<srcFile>src/main/resources/sql/schema-h2.sql</srcFile>
								<srcFile>src/main/resources/sql/data-h2.sql</srcFile>
							</srcFiles>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>com.h2database</groupId>
						<artifactId>h2</artifactId>
						<version>${h2.version}</version> 
					</dependency>
					<dependency>
						<groupId>org.mariadb.jdbc</groupId>
						<artifactId>mariadb-java-client</artifactId>
						<version>${mariadb.version}</version>
					</dependency>
				</dependencies>

			</plugin>
			
			
			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<executions>
					<execution>
						<id>generate-mariadb</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>

				<dependencies>
					<dependency>
						<groupId>org.mariadb.jdbc</groupId>
						<artifactId>mariadb-java-client</artifactId>
						<version>${mariadb.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<configurationFile>${project.basedir}/src/main/resources/generate/jooq/JooqConfig.xml</configurationFile>
				</configuration>
			</plugin>
			
			
			
			<!-- 复合主键无法取消 -->
			<!-- https://discourse.hibernate.org/t/hibernate-tools-is-it-possible-ignore-composite-id-in-table/6748 -->
			<plugin>
		        <groupId>org.apache.maven.plugins</groupId>
		        <artifactId>maven-antrun-plugin</artifactId>
		        <executions>
		            <execution>
		              <phase>generate-sources</phase>
		              <goals>
							<goal>run</goal>
					  </goals>
		              <configuration>
		                <target>
		                	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="maven.dependency.classpath"/>
		                	<hibernatetool destdir="${project.basedir}/target/generated-sources/repository">
							  	<jdbcconfiguration
								 	propertyfile="${project.basedir}/src/main/resources/generate/jpa/hibernate.properties"
						  			revengfile="${project.basedir}/src/main/resources/generate/jpa/hibernate.reveng.xml"
						  			packagename="jj.tech.paolu.repository.jpa"
						  			detectManytoMany="false">
	  							</jdbcconfiguration>
								<hbm2java jdk5="true" ejb3="true"></hbm2java>
								<hbmtemplate
								   templatepath="${project.basedir}/src/main/resources/generate/jpa"
								   template="DaoHome.ftl"
								   filepattern="{package-name}/daos/{class-name}JpaDao.java">
								    <property key="jdk5" value="false" />
	  								<property key="ejb3" value="false" />
								 </hbmtemplate>
							</hibernatetool>
		                </target>
		              </configuration>
		            </execution>
		          </executions>
		          <dependencies>
			          <dependency>
			              <groupId>org.hibernate.tool</groupId>
			              <artifactId>hibernate-tools-orm</artifactId>
			              <version>6.1.7.Final</version>
			          </dependency>
		          </dependencies>
	        </plugin>
	        
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>com.querydsl</groupId>
                            <artifactId>querydsl-apt</artifactId>
                            <version>${querydsl.version}</version>
                            <classifier>jakarta</classifier>
                        </path>
                        <path>
                            <groupId>jakarta.annotation</groupId>
                            <artifactId>jakarta.annotation-api</artifactId>
                            <version>${jakarta-annotation.version}</version>
                        </path>
                        <path>
                            <groupId>jakarta.persistence</groupId>
                            <artifactId>jakarta.persistence-api</artifactId>
                            <version>${jakarta-persistence.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
		      
		      
		</plugins>
	</build>
	
	
	
	
</project>