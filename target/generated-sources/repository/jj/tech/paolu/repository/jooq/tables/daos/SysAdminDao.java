/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import jj.tech.paolu.repository.jooq.tables.SysAdmin;
import jj.tech.paolu.repository.jooq.tables.records.SysAdminRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SysAdminDao extends DAOImpl<SysAdminRecord, jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin, Long> {

    /**
     * Create a new SysAdminDao without any configuration
     */
    public SysAdminDao() {
        super(SysAdmin.SYS_ADMIN, jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin.class);
    }

    /**
     * Create a new SysAdminDao with an attached configuration
     */
    @Autowired
    public SysAdminDao(Configuration configuration) {
        super(SysAdmin.SYS_ADMIN, jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin.class, configuration);
    }

    @Override
    public Long getId(jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SysAdmin.SYS_ADMIN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchById(Long... values) {
        return fetch(SysAdmin.SYS_ADMIN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin fetchOneById(Long value) {
        return fetchOne(SysAdmin.SYS_ADMIN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchOptionalById(Long value) {
        return fetchOptional(SysAdmin.SYS_ADMIN.ID, value);
    }

    /**
     * Fetch records that have <code>REALNAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchRangeOfRealname(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysAdmin.SYS_ADMIN.REALNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REALNAME IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchByRealname(String... values) {
        return fetch(SysAdmin.SYS_ADMIN.REALNAME, values);
    }

    /**
     * Fetch records that have <code>USERNAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysAdmin.SYS_ADMIN.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchByUsername(String... values) {
        return fetch(SysAdmin.SYS_ADMIN.USERNAME, values);
    }

    /**
     * Fetch records that have <code>PASSWORD BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysAdmin.SYS_ADMIN.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchByPassword(String... values) {
        return fetch(SysAdmin.SYS_ADMIN.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>IS_LOCKED BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchRangeOfIsLocked(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(SysAdmin.SYS_ADMIN.IS_LOCKED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>IS_LOCKED IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysAdmin> fetchByIsLocked(Byte... values) {
        return fetch(SysAdmin.SYS_ADMIN.IS_LOCKED, values);
    }
}
