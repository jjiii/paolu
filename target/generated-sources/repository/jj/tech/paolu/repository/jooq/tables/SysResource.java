/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables;


import java.util.function.Function;

import jj.tech.paolu.repository.jooq.Keys;
import jj.tech.paolu.repository.jooq.Public;
import jj.tech.paolu.repository.jooq.tables.records.SysResourceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysResource extends TableImpl<SysResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.SYS_RESOURCE</code>
     */
    public static final SysResource SYS_RESOURCE = new SysResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysResourceRecord> getRecordType() {
        return SysResourceRecord.class;
    }

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.ID</code>.
     */
    public final TableField<SysResourceRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.PARENT_ID</code>.
     */
    public final TableField<SysResourceRecord, Long> PARENT_ID = createField(DSL.name("PARENT_ID"), SQLDataType.BIGINT.defaultValue(DSL.field("NULL", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.LEVEL</code>. 菜单排列顺序
     */
    public final TableField<SysResourceRecord, Short> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.SMALLINT.defaultValue(DSL.field("NULL", SQLDataType.SMALLINT)), this, "菜单排列顺序");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.NAME</code>.
     */
    public final TableField<SysResourceRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.TYPES</code>. 资源类型
     */
    public final TableField<SysResourceRecord, String> TYPES = createField(DSL.name("TYPES"), SQLDataType.VARCHAR(40).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "资源类型");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.URL</code>.
     */
    public final TableField<SysResourceRecord, String> URL = createField(DSL.name("URL"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.ICON</code>. 菜单图标
     */
    public final TableField<SysResourceRecord, String> ICON = createField(DSL.name("ICON"), SQLDataType.VARCHAR(100).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "菜单图标");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.ISHIDE</code>. 是否折叠隐藏
     */
    public final TableField<SysResourceRecord, Byte> ISHIDE = createField(DSL.name("ISHIDE"), SQLDataType.TINYINT.defaultValue(DSL.field("'0'", SQLDataType.TINYINT)), this, "是否折叠隐藏");

    /**
     * The column <code>PUBLIC.SYS_RESOURCE.DESCRIPTION</code>.
     */
    public final TableField<SysResourceRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.VARCHAR(200).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private SysResource(Name alias, Table<SysResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysResource(Name alias, Table<SysResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_RESOURCE</code> table reference
     */
    public SysResource(String alias) {
        this(DSL.name(alias), SYS_RESOURCE);
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_RESOURCE</code> table reference
     */
    public SysResource(Name alias) {
        this(alias, SYS_RESOURCE);
    }

    /**
     * Create a <code>PUBLIC.SYS_RESOURCE</code> table reference
     */
    public SysResource() {
        this(DSL.name("SYS_RESOURCE"), null);
    }

    public <O extends Record> SysResource(Table<O> child, ForeignKey<O, SysResourceRecord> key) {
        super(child, key, SYS_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SysResourceRecord, Long> getIdentity() {
        return (Identity<SysResourceRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SysResourceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_9;
    }

    @Override
    public SysResource as(String alias) {
        return new SysResource(DSL.name(alias), this);
    }

    @Override
    public SysResource as(Name alias) {
        return new SysResource(alias, this);
    }

    @Override
    public SysResource as(Table<?> alias) {
        return new SysResource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysResource rename(String name) {
        return new SysResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysResource rename(Name name) {
        return new SysResource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysResource rename(Table<?> name) {
        return new SysResource(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Short, String, String, String, String, Byte, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super Byte, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
