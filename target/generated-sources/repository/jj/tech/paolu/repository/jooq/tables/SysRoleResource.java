/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables;


import java.util.function.Function;

import jj.tech.paolu.repository.jooq.Keys;
import jj.tech.paolu.repository.jooq.Public;
import jj.tech.paolu.repository.jooq.tables.records.SysRoleResourceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRoleResource extends TableImpl<SysRoleResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.SYS_ROLE_RESOURCE</code>
     */
    public static final SysRoleResource SYS_ROLE_RESOURCE = new SysRoleResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysRoleResourceRecord> getRecordType() {
        return SysRoleResourceRecord.class;
    }

    /**
     * The column <code>PUBLIC.SYS_ROLE_RESOURCE.ROLE_ID</code>.
     */
    public final TableField<SysRoleResourceRecord, Long> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYS_ROLE_RESOURCE.RES_ID</code>.
     */
    public final TableField<SysRoleResourceRecord, Long> RES_ID = createField(DSL.name("RES_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private SysRoleResource(Name alias, Table<SysRoleResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysRoleResource(Name alias, Table<SysRoleResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ROLE_RESOURCE</code> table reference
     */
    public SysRoleResource(String alias) {
        this(DSL.name(alias), SYS_ROLE_RESOURCE);
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ROLE_RESOURCE</code> table reference
     */
    public SysRoleResource(Name alias) {
        this(alias, SYS_ROLE_RESOURCE);
    }

    /**
     * Create a <code>PUBLIC.SYS_ROLE_RESOURCE</code> table reference
     */
    public SysRoleResource() {
        this(DSL.name("SYS_ROLE_RESOURCE"), null);
    }

    public <O extends Record> SysRoleResource(Table<O> child, ForeignKey<O, SysRoleResourceRecord> key) {
        super(child, key, SYS_ROLE_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SysRoleResourceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public SysRoleResource as(String alias) {
        return new SysRoleResource(DSL.name(alias), this);
    }

    @Override
    public SysRoleResource as(Name alias) {
        return new SysRoleResource(alias, this);
    }

    @Override
    public SysRoleResource as(Table<?> alias) {
        return new SysRoleResource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleResource rename(String name) {
        return new SysRoleResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleResource rename(Name name) {
        return new SysRoleResource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleResource rename(Table<?> name) {
        return new SysRoleResource(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
