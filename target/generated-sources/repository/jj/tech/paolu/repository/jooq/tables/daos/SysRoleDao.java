/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import jj.tech.paolu.repository.jooq.tables.SysRole;
import jj.tech.paolu.repository.jooq.tables.records.SysRoleRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class SysRoleDao extends DAOImpl<SysRoleRecord, jj.tech.paolu.repository.jooq.tables.pojos.SysRole, Long> {

    /**
     * Create a new SysRoleDao without any configuration
     */
    public SysRoleDao() {
        super(SysRole.SYS_ROLE, jj.tech.paolu.repository.jooq.tables.pojos.SysRole.class);
    }

    /**
     * Create a new SysRoleDao with an attached configuration
     */
    @Autowired
    public SysRoleDao(Configuration configuration) {
        super(SysRole.SYS_ROLE, jj.tech.paolu.repository.jooq.tables.pojos.SysRole.class, configuration);
    }

    @Override
    public Long getId(jj.tech.paolu.repository.jooq.tables.pojos.SysRole object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SysRole.SYS_ROLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchById(Long... values) {
        return fetch(SysRole.SYS_ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public jj.tech.paolu.repository.jooq.tables.pojos.SysRole fetchOneById(Long value) {
        return fetchOne(SysRole.SYS_ROLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchOptionalById(Long value) {
        return fetchOptional(SysRole.SYS_ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>PARENTID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchRangeOfParentid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(SysRole.SYS_ROLE.PARENTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PARENTID IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchByParentid(Long... values) {
        return fetch(SysRole.SYS_ROLE.PARENTID, values);
    }

    /**
     * Fetch records that have <code>NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysRole.SYS_ROLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchByName(String... values) {
        return fetch(SysRole.SYS_ROLE.NAME, values);
    }

    /**
     * Fetch records that have <code>STATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchRangeOfState(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysRole.SYS_ROLE.STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STATE IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchByState(String... values) {
        return fetch(SysRole.SYS_ROLE.STATE, values);
    }

    /**
     * Fetch records that have <code>DEPARTMENT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchRangeOfDepartment(String lowerInclusive, String upperInclusive) {
        return fetchRange(SysRole.SYS_ROLE.DEPARTMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DEPARTMENT IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.SysRole> fetchByDepartment(String... values) {
        return fetch(SysRole.SYS_ROLE.DEPARTMENT, values);
    }
}
