/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables;


import java.util.function.Function;

import jj.tech.paolu.repository.jooq.Keys;
import jj.tech.paolu.repository.jooq.Public;
import jj.tech.paolu.repository.jooq.tables.records.SysAdminRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysAdmin extends TableImpl<SysAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.SYS_ADMIN</code>
     */
    public static final SysAdmin SYS_ADMIN = new SysAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysAdminRecord> getRecordType() {
        return SysAdminRecord.class;
    }

    /**
     * The column <code>PUBLIC.SYS_ADMIN.ID</code>.
     */
    public final TableField<SysAdminRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.SYS_ADMIN.REALNAME</code>.
     */
    public final TableField<SysAdminRecord, String> REALNAME = createField(DSL.name("REALNAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYS_ADMIN.USERNAME</code>.
     */
    public final TableField<SysAdminRecord, String> USERNAME = createField(DSL.name("USERNAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYS_ADMIN.PASSWORD</code>.
     */
    public final TableField<SysAdminRecord, String> PASSWORD = createField(DSL.name("PASSWORD"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYS_ADMIN.IS_LOCKED</code>.
     */
    public final TableField<SysAdminRecord, Byte> IS_LOCKED = createField(DSL.name("IS_LOCKED"), SQLDataType.TINYINT.nullable(false), this, "");

    private SysAdmin(Name alias, Table<SysAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysAdmin(Name alias, Table<SysAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ADMIN</code> table reference
     */
    public SysAdmin(String alias) {
        this(DSL.name(alias), SYS_ADMIN);
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ADMIN</code> table reference
     */
    public SysAdmin(Name alias) {
        this(alias, SYS_ADMIN);
    }

    /**
     * Create a <code>PUBLIC.SYS_ADMIN</code> table reference
     */
    public SysAdmin() {
        this(DSL.name("SYS_ADMIN"), null);
    }

    public <O extends Record> SysAdmin(Table<O> child, ForeignKey<O, SysAdminRecord> key) {
        super(child, key, SYS_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SysAdminRecord, Long> getIdentity() {
        return (Identity<SysAdminRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SysAdminRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public SysAdmin as(String alias) {
        return new SysAdmin(DSL.name(alias), this);
    }

    @Override
    public SysAdmin as(Name alias) {
        return new SysAdmin(alias, this);
    }

    @Override
    public SysAdmin as(Table<?> alias) {
        return new SysAdmin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysAdmin rename(String name) {
        return new SysAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysAdmin rename(Name name) {
        return new SysAdmin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysAdmin rename(Table<?> name) {
        return new SysAdmin(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
