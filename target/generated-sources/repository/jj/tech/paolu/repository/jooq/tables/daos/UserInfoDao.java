/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import jj.tech.paolu.repository.jooq.tables.UserInfo;
import jj.tech.paolu.repository.jooq.tables.records.UserInfoRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserInfoDao extends DAOImpl<UserInfoRecord, jj.tech.paolu.repository.jooq.tables.pojos.UserInfo, Long> {

    /**
     * Create a new UserInfoDao without any configuration
     */
    public UserInfoDao() {
        super(UserInfo.USER_INFO, jj.tech.paolu.repository.jooq.tables.pojos.UserInfo.class);
    }

    /**
     * Create a new UserInfoDao with an attached configuration
     */
    @Autowired
    public UserInfoDao(Configuration configuration) {
        super(UserInfo.USER_INFO, jj.tech.paolu.repository.jooq.tables.pojos.UserInfo.class, configuration);
    }

    @Override
    public Long getId(jj.tech.paolu.repository.jooq.tables.pojos.UserInfo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchById(Long... values) {
        return fetch(UserInfo.USER_INFO.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public jj.tech.paolu.repository.jooq.tables.pojos.UserInfo fetchOneById(Long value) {
        return fetchOne(UserInfo.USER_INFO.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchOptionalById(Long value) {
        return fetchOptional(UserInfo.USER_INFO.ID, value);
    }

    /**
     * Fetch records that have <code>REAL_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchRangeOfRealName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.REAL_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REAL_NAME IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchByRealName(String... values) {
        return fetch(UserInfo.USER_INFO.REAL_NAME, values);
    }

    /**
     * Fetch records that have <code>USER_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>USER_NAME IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchByUserName(String... values) {
        return fetch(UserInfo.USER_INFO.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>PASSWORD BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchByPassword(String... values) {
        return fetch(UserInfo.USER_INFO.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>HEAD_IMG BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchRangeOfHeadImg(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserInfo.USER_INFO.HEAD_IMG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>HEAD_IMG IN (values)</code>
     */
    public List<jj.tech.paolu.repository.jooq.tables.pojos.UserInfo> fetchByHeadImg(String... values) {
        return fetch(UserInfo.USER_INFO.HEAD_IMG, values);
    }
}
