/*
 * This file is generated by jOOQ.
 */
package jj.tech.paolu.repository.jooq.tables;


import java.util.function.Function;

import jj.tech.paolu.repository.jooq.Keys;
import jj.tech.paolu.repository.jooq.Public;
import jj.tech.paolu.repository.jooq.tables.records.SysRoleAdminRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRoleAdmin extends TableImpl<SysRoleAdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.SYS_ROLE_ADMIN</code>
     */
    public static final SysRoleAdmin SYS_ROLE_ADMIN = new SysRoleAdmin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysRoleAdminRecord> getRecordType() {
        return SysRoleAdminRecord.class;
    }

    /**
     * The column <code>PUBLIC.SYS_ROLE_ADMIN.ID</code>.
     */
    public final TableField<SysRoleAdminRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.SYS_ROLE_ADMIN.ADMIN_ID</code>.
     */
    public final TableField<SysRoleAdminRecord, Long> ADMIN_ID = createField(DSL.name("ADMIN_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYS_ROLE_ADMIN.ROLE_ID</code>.
     */
    public final TableField<SysRoleAdminRecord, Long> ROLE_ID = createField(DSL.name("ROLE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private SysRoleAdmin(Name alias, Table<SysRoleAdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysRoleAdmin(Name alias, Table<SysRoleAdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ROLE_ADMIN</code> table reference
     */
    public SysRoleAdmin(String alias) {
        this(DSL.name(alias), SYS_ROLE_ADMIN);
    }

    /**
     * Create an aliased <code>PUBLIC.SYS_ROLE_ADMIN</code> table reference
     */
    public SysRoleAdmin(Name alias) {
        this(alias, SYS_ROLE_ADMIN);
    }

    /**
     * Create a <code>PUBLIC.SYS_ROLE_ADMIN</code> table reference
     */
    public SysRoleAdmin() {
        this(DSL.name("SYS_ROLE_ADMIN"), null);
    }

    public <O extends Record> SysRoleAdmin(Table<O> child, ForeignKey<O, SysRoleAdminRecord> key) {
        super(child, key, SYS_ROLE_ADMIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SysRoleAdminRecord, Long> getIdentity() {
        return (Identity<SysRoleAdminRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<SysRoleAdminRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_A5;
    }

    @Override
    public SysRoleAdmin as(String alias) {
        return new SysRoleAdmin(DSL.name(alias), this);
    }

    @Override
    public SysRoleAdmin as(Name alias) {
        return new SysRoleAdmin(alias, this);
    }

    @Override
    public SysRoleAdmin as(Table<?> alias) {
        return new SysRoleAdmin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleAdmin rename(String name) {
        return new SysRoleAdmin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleAdmin rename(Name name) {
        return new SysRoleAdmin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysRoleAdmin rename(Table<?> name) {
        return new SysRoleAdmin(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
